#############
###
### THIS IS AN AUTOGENERATED FILE!!! DO NOT EDIT THIS FILE DIRECTLY!!!
###
#############

apiVersion: v1
data:
  config.yaml: |
    plank:
      job_url_prefix_config:
        "*": "https://prow.pusher.com/view/gcs"
      job_url_template: "https://prow.pusher.com/view/gcs/pusher-ci-cluster-35535/pr-logs/pull/{{.Spec.Refs.Repo}}/{{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}/{{.Spec.Job}}/{{.Status.BuildID}}"
      report_template: "[Full PR test history](https://prow.pusher.com/pr-history?org={{.Spec.Refs.Org}}&repo={{.Spec.Refs.Repo}}&pr={{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}})"

      default_decoration_configs:
        "*":
          timeout: 7200000000000 # 2h
          grace_period: 15000000000 # 15s
          utility_images:
            clonerefs: "quay.io/pusher/clonerefs:v20190401-6a7e3ff"
            initupload: "gcr.io/k8s-prow/initupload:v20200305-e8ef9758b"
            entrypoint: "gcr.io/k8s-prow/entrypoint:v20200305-e8ef9758b"
            sidecar: "gcr.io/k8s-prow/sidecar:v20200305-e8ef9758b"
          gcs_configuration:
            bucket: "pusher-ci-cluster-35535"
            path_strategy: "explicit"
          gcs_credentials_secret: "prow-gcs"

    sinker:
      resync_period: 1h
      max_prowjob_age: 48h
      max_pod_age: 1h

    deck:
      branding:
        logo: "/static/extensions/logo.svg"
        favicon: "extensions/favicon.ico"
        header_color: "#300D4F"
      spyglass:
        size_limit: 500000000
        lenses:
        - lens:
            name: metadata
          required_files:
          - started.json
          optional_files:
          - finished.json
        - lens:
            name: buildlog
            config:
              highlight_regexes:
              - timed out
              - 'ERROR:'
              - (\s|^)(FAIL|Failure \[)\b
              - (\s|^)panic\b
              - ^E\d{4} \d\d:\d\d:\d\d\.\d\d\d]
          required_files:
                - build-log.txt
        - lens:
            name: junit
          required_files:
          - artifacts/junit.*\.xml
      rerun_auth_config:
        github_users:
          - mthssdrbrg
          - mdpye
          - damdo

    prowjob_namespace: default
    pod_namespace: default
    log_level: info

    github_reporter:
      job_types_to_report:
      - presubmit
      - postsubmit

    presets:
      - labels:
          preset-service-account: "true"
        env:
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /etc/service-account/service-account.json
          - name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
            value: /etc/service-account/service-account.json
        volumeMounts:
          - name: service
            mountPath: /etc/service-account
            readOnly: true
        volumes:
          - name: service
            secret:
              secretName: prow-gcs

      - labels:
          preset-root-docker-credentials: "true"
        volumes:
          - name: credentials
            secret:
              secretName: docker-config
        volumeMounts:
          - name: credentials
            mountPath: /root/.docker
            readOnly: true

      - labels:
          preset-docker-credentials: "true"
        volumes:
          - name: credentials
            secret:
              secretName: docker-config
        volumeMounts:
          - name: credentials
            mountPath: /home/prow/.docker
            readOnly: true

      # docker-in-docker (with images/bootstrap) preset
      # NOTE: using this also requires using that image,
      # ensuring you run your test under either the ENTRYPOINT or:
      # /usr/local/bin/runner my-test-command --foo --bar
      # AND setting the following on your PodSpec:
      # securityContext:
      #   privileged: true
      - labels:
          preset-dind-enabled: "true"
        env:
          - name: DOCKER_IN_DOCKER_ENABLED
            value: "true"
        volumes:
          - name: docker-graph
            emptyDir: {}
        volumeMounts:
          - name: docker-graph
            mountPath: /docker-graph

      # kubernetes-in-docker (with images/bootstrap) preset
      # NOTE: using this also requires using that image,
      # ensuring you run your test under either the ENTRYPOINT or:
      # /usr/local/bin/runner my-test-command --foo --bar
      # AND setting the following on your PodSpec:
      # securityContext:
      #   privileged: true
      - labels:
          preset-kind-enabled: "true"
        env:
          - name: KUBERNETES_IN_DOCKER_ENABLED
            value: "true"
        volumes:
          - name: docker-graph
            emptyDir: {}
          - name: modules
            hostPath:
              path: /lib/modules
              type: Directory
          - name: cgroup
            hostPath:
              path: /sys/fs/cgroup
              type: Directory
          - name: dind-storage
            emptyDir: {}
        volumeMounts:
          - name: docker-graph
            mountPath: /docker-graph
          - name: modules
            mountPath: /lib/modules
            readOnly: true
          - name: cgroup
            mountPath: /sys/fs/cgroup
          - name: dind-storage
            mountPath: /var/lib/docker

      - labels:
          preset-snyk-token: "true"
        env:
          - name: SNYK_TOKEN
            valueFrom:
              secretKeyRef:
                name: snyk-api-token
                key: token

      - labels:
          preset-golang-junit: "true"
        env:
          - name: GOLANG_JUNIT
            value: "true"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: config
  namespace: default
